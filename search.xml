<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hello word</title>
      <link href="/2024/05/04/hello-word/"/>
      <url>/2024/05/04/hello-word/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/05/04/xiaoxi/"/>
      <url>/2024/05/04/xiaoxi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>first try</p></blockquote><h1 id="测试文章"><a href="#测试文章" class="headerlink" title="测试文章"></a>测试文章</h1><p>123344</p><p>inject:<br>  head:<br>    inject:<br>  head:</p><p>  bottom:<br>       - <script src="https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"></script><br>       - <script src="https://cdn.jsdelivr.net/gh/xiabo2/CDN@latest/fishes.js"></script></p><p>  bottom:</p><pre><code>   - &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt;          - &lt;script src=&quot;https://cdn.jsdelivr.net/gh/xiabo2/CDN@latest/fishes.js&quot;&gt;&lt;/script&gt;</code></pre><h2 id="达到"><a href="#达到" class="headerlink" title="达到"></a>达到</h2><h3 id="DSA"><a href="#DSA" class="headerlink" title="DSA"></a>DSA</h3><p>根据C++ primer 做的笔记</p><h1 id="CH1-开始"><a href="#CH1-开始" class="headerlink" title="CH1 开始"></a>CH1 开始</h1><p>程序源文件命名约定 常见的为.cc .cxx .cpp .cp  .C</p><p>vscode 里面类似于打出main 就有的那个一整块的东西 snips</p><h2 id="标准输入输出对象"><a href="#标准输入输出对象" class="headerlink" title="标准输入输出对象"></a>标准输入输出对象</h2><p>标准库定义了4个IO对象。为了处理输入，我们使用一个名为cin（发音为see-in）的istream类型的对象。这个对象也被称为标准输入（standard input)。对于输出，我们使用一个名为 cout（发音为 see-out）的ostream类型的对象。此对象也被称为标准输出(standard output)。标准库还定义了其他两个ostream对象，名为<strong>cerr和 clog</strong>(（发音分别为see-err 和 see-log)。<strong>我们通常用cerr来输出警告和错误消息，因此它也被称为标准错误(standard error)。而clog用来输出程序运行时的一般性信息。</strong></p><p>字符串字面值常量（stringliteral)，是用一对双引号包围的字符序列。在双引号之间的文本被打印到标准输出。</p><p>第二个运算符打印<strong>endl</strong>，<strong>这是一个被称为操纵符</strong>(manipulator)的特殊值。写入endl的效果是结束当前行，<strong>并将与设备关联的缓冲区(buffer)</strong><br><strong>中的内容刷到设备中。缓冲刷新操作可以保证到目前为止程序所产生的所有输出都真正写入输出流中，而不是仅停留在内存中等待写入流。</strong></p><p>程序员常常在调试时添加打印语句。这类语句应该保证“一直”刷新流。否则,如果程序崩溃，输出可能还留在缓冲区中,从而导致关于程序崩溃位置的错误推断。</p><h3 id="使用标准库命名"><a href="#使用标准库命名" class="headerlink" title="使用标准库命名"></a>使用标准库命名</h3><p>通过命名空间使用标准库有一个副作用:当使用标准库中的一个名字时，必须显式说明我们想使用来自命名空间std中的名字。例如，需要写出std: :cout，通过使用作用域运算符(::)来指出我们想使用定义在命名空间std 中的名字cout。3.1节(第74页)将给出一个更简单的访问标准库中名字的方法。</p><p>作用域运算符::</p><h3 id="从流读取数据"><a href="#从流读取数据" class="headerlink" title="从流读取数据"></a>从流读取数据</h3><p>cin&gt;&gt; </p><p>输入运算符 &gt;&gt; </p><p>它读入输入数据。输入运算符(&gt;&gt;）与输出运算符类似，它接受一个istream作为其左侧运算对象，接受一个对象作为其右侧运算对象。它从给入给定对象中。与输出运算符类似，输入运算符返回其左侧运算对象作为其计算结果。因此，此表达式等价于</p><p>(std: :cin &gt;&gt;v1）&gt;&gt;v2;</p><h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">std: : cout &lt;&lt;<span class="string">&quot;The sum of &quot;</span> &lt;&lt; vl;</span><br><span class="line">&lt;&lt; <span class="string">&quot; and &quot;</span> &lt;&lt; v2;</span><br><span class="line">&lt;&lt;<span class="string">&quot; is &quot;</span> &lt;&lt; vl + v2&lt;&lt; std: :endl;</span><br><span class="line"><span class="comment">//如果程序是合法的，它输出什么?如果程序不合法，原因何在?应该如何修正?</span></span><br></pre></td></tr></table></figure><p>在C++中，流插入操作（<code>&lt;&lt;</code>）应该在每对 <code>&lt;&lt;</code> 之间有逗号（<code>,</code>）来分隔，而且整个表达式应该在单行中完成，否则可能会导致编译错误。</p><p>修改！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt;<span class="string">&quot;The sum of &quot;</span> &lt;&lt; x1&lt;&lt;</span><br><span class="line">         <span class="string">&quot; and &quot;</span> &lt;&lt; x2&lt;&lt;</span><br><span class="line">         <span class="string">&quot; is &quot;</span> &lt;&lt;x1+x2 &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>ctr+Z 只有单独的一行才能使用</p><p>cout和cin转换为bool，就是输入流的状态，若有内容则为true，否则false。可以试着运行这个代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> s[<span class="number">20</span>];</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;plese enter:\n&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;s)</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;进入循环了\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>std: :cout &lt;&lt; “&#x2F;<em>“;std: :cout&lt;&lt;”</em>&#x2F;“;<br>std::cout &lt;&lt;&#x2F;<em>“</em>&#x2F;“<em>&#x2F;;<br>std: :cout &lt;&#x2F; <em>“</em>&#x2F;“&#x2F;</em>“&#x2F;<em>“</em>&#x2F;;</p><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><p>关于读取数量不定的输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>, value = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//读取数据直到遇到文件尾，计算所有读入的值的和</span></span><br><span class="line">    <span class="keyword">while</span> (std: :cin &gt;&gt; value)</span><br><span class="line">    sum += value; <span class="comment">//等价于sum = sum + value</span></span><br><span class="line">    std: : cout &lt;&lt; <span class="string">&quot;sum is: &quot;</span> &lt;&lt; sum&lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编译器常见的错误"><a href="#编译器常见的错误" class="headerlink" title="编译器常见的错误"></a>编译器常见的错误</h3><p>语法错误(syntax error):程序员犯了C++语言文本上的错误。</p><p>类型错误(type error）:C++中每个数据项都有其类型。例如，10的类型是int(或者更通俗地说，“10是一个 int型数据”)。单词”hello”,包括两侧的双引号标记,则是一个字符串字面值常量。一个类型错误的例子是,向一个期望参数为 int的函数传递了一个字符串字面值常量。</p><p>声明错误（declaration error）: C++程序中的每个名字都要先声明后使用。名字声明失败通常会导致一条错误信息。两种常见的声明错误是:对来自标准库的名字忘记使用std::、标识符名字拼写错误</p><h2 id="关于类"><a href="#关于类" class="headerlink" title="关于类"></a>关于类</h2><p>每个类都定义了一个新的类型  类型名就是类名</p><p>比如我们定义的Sales_item就定义了一个名为Sales_item的类型，与内置类型一样，可以定义类的类型的变量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sales_item item;</span><br></pre></td></tr></table></figure><p>是想表达 item是一个sales_item类型的对象。我们通常将“一个sales_item类型的对象”简单说成“一个Sales_item对象”，或更简单的“一个Sales_ item”。</p><h2 id="CH2-变量和基本类型"><a href="#CH2-变量和基本类型" class="headerlink" title="CH2 变量和基本类型"></a>CH2 变量和基本类型</h2><h3 id="关于无符号数"><a href="#关于无符号数" class="headerlink" title="关于无符号数"></a>关于无符号数</h3><p>无符号数不会是负的</p><img src="D:\typora\pic\image-20240504183118013.png" alt="image-20240504183118013" style="zoom:67%;" /><p>如果表达式里既有带符号类型又有无符号类型,当带符号类型取值为负时会出现异常结果，这是因为带符号数会自动地转换成无符号数。例如,在一个形如a*b的式子中,如果a &#x3D;-1, b&#x3D;-1，而且a和b都是int,则表达式的值显然为-1。然而,如果a是int，而b是unsigned,则结果须视在当前机器上int所占位数而定。在我们的环境里，结果是4294967295。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/04/hello-world/"/>
      <url>/2024/05/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
