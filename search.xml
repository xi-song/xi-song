<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/05/05/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0----%E6%8C%87%E9%92%88%E7%AE%80%E4%BB%8B%EF%BC%88%E4%BB%A5%E4%BA%A4%E6%8D%A2%E6%95%B0%E5%80%BC%E4%B8%BA%E4%BE%8B%EF%BC%89/"/>
      <url>/2024/05/05/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0----%E6%8C%87%E9%92%88%E7%AE%80%E4%BB%8B%EF%BC%88%E4%BB%A5%E4%BA%A4%E6%8D%A2%E6%95%B0%E5%80%BC%E4%B8%BA%E4%BE%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix">        <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/kdoc_html_views-1a98987dfd.css">        <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-044f2cf1dc.css">                <div id="content_views" class="markdown_views prism-atom-one-dark">                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>                    </svg>                    <blockquote>  <p>🌈指针一直是<a href="https://so.csdn.net/so/search?q=C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0&amp;spm=1001.2101.3001.7020" target="_blank" class="hl hl-1" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;C语言学习\&quot;}&quot;}" data-tit="C语言学习" data-pretit="c语言学习">C语言学习</a>者的一大拦路虎，下面我就简要以数值交换为例，简要说说指针的用处~同时，需要大家理解计算机底层的存储的逻辑，具体可以下拉到总结那的一张图，很清楚 ~ 相信看了这个例子，对于指针的使用你会有更深的了解 ~<br> 🙋&gt;本文参考于C Primer Plus 第六版~ ，开始叭~</p> </blockquote> <p></p> <div class="toc">  <h4><a name="t0"></a>文章目录</h4>  <ul><li><a href="#_4" rel="nofollow" target="_self">指针简介</a></li><li><ul><li><a href="#__31" rel="nofollow" target="_self">间接运算符 *</a></li><li><a href="#_57" rel="nofollow" target="_self">声明指针</a></li><li><a href="#_81" rel="nofollow" target="_self">使用指针在函数间通信</a></li><li><a href="#_231" rel="nofollow" target="_self">总结</a></li></ul>  </li></ul> </div> <p></p> <h2><a name="t1"></a><a id="_4"></a>指针简介</h2> <p>指针是一个值为<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80&amp;spm=1001.2101.3001.7020" target="_blank" class="hl hl-1" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;内存地址\&quot;}&quot;}" data-tit="内存地址" data-pretit="内存地址">内存地址</a>的变量，或数据对象。、正如char类型变量的值是字符，int类型变量的值是整数，<strong>指针变量的值是地址</strong>。在C语言中，指针有许多用法。本章将介绍如何把指针作为函数参数使用，以及为何要这样用。</p> <p>假设一个指针变量名是ptr，可以编写如下语句：</p> <pre data-index="0" class="set-code-show prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>pooh<span class="token punctuation">;</span> <span class="token operator">//</span> 把pooh的地址赋给ptr<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li></ul></pre> <p>对于这条语句，我们说ptr“指向”pooh。ptr和&amp;pooh的区别是ptr是变量，而&amp;pooh是常量。或者，ptr是可修改的左值，而&amp;pooh是右值。还可以把ptr指向别处：</p> <pre data-index="1" class="set-code-show prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>bah<span class="token punctuation">;</span> <span class="token operator">//</span> 把ptr指向bah，而不是pooh<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li></ul></pre> <p>现在ptr的值是bah的地址。</p> <p>对于这条语句， 我们说ptr“指向”pooh。 <strong>ptr和&amp;pooh的区别是ptr是变量，<br> 而&amp;pooh是常量。</strong> 或者，ptr是可修改的左值，而&amp;pooh是右值。</p> <p>还可以把ptr指向别处：<br> ptr = &amp;bah; // 把ptr指向bah，而不是pooh<br> 现在ptr的值是bah的地址。</p> <h3><a name="t2"></a><a id="__31"></a>间接运算符 *</h3> <p>间接运算符*（indirection operator）找出储存在bah中的值，该运算符有时也称为<strong>解引用运算符</strong>。</p> <pre data-index="2" class="set-code-show prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">val <span class="token operator">=</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token operator">//</span> 找出ptr指向的值<p>ptr <span class="token operator">&#x3D;</span> <span class="token operator">&amp;</span>bah<span class="token punctuation">;</span><br>val <span class="token operator">&#x3D;</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token operator">&#x2F;&#x2F;</span>两句放在一起相当于下面的语句：</p><p>val <span class="token operator">&#x3D;</span> bah<span class="token punctuation">;</span></p><div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li></ul></pre> <pre data-index="3" class="set-code-show prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token operator">//</span>后跟一个指针名或地址时，<span class="token operator">*</span>给出储存在指针指向地址上的值。<p>nurse <span class="token operator">&#x3D;</span> <span class="token number">22</span><span class="token punctuation">;</span><br>ptr <span class="token operator">&#x3D;</span> <span class="token operator">&amp;</span>nurse<span class="token punctuation">;</span> <span class="token operator">&#x2F;&#x2F;</span> 指向nurse的指针<br>val <span class="token operator">&#x3D;</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>  <span class="token operator">&#x2F;&#x2F;</span> 把ptr指向的地址上的值赋给<br><span class="token operator">&#x2F;&#x2F;</span>执行以上<span class="token number">3</span>条语句的最终结果是把<span class="token number">22</span>赋给val。</p><div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li></ul></pre> <p>由此可见，使用地址和间接运算符可以间接完成上面这条语句的功能，这也是“间接运算符”名称的由来。</p> <h3><a name="t3"></a><a id="_57"></a>声明指针</h3> <p><strong>要创建指针变量，先要声明指针变量的类型。</strong></p> <p>因为<strong>声明指针变量时必须指定指针所指向变量的类型</strong>，因为不同的变量类型占用不同的存储空间，一些指针操作要求知道操作对象的大小。另外，<strong>程序必须知道储存在指定地址上的数据类型</strong>。long和float可能占用相同的存储空间，但是它们储存数字却大相径庭。下面是一些指针的声明示例：</p> <pre data-index="4" class="set-code-show prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token builtin">int</span> <span class="token operator">*</span> pi<span class="token punctuation">;</span>   <span class="token operator">//</span> pi是指向<span class="token builtin">int</span>类型变量的指针char <span class="token operator">*</span> pc<span class="token punctuation">;</span>    <span class="token operator">//</span> pc是指向char类型变量的指针<span class="token builtin">float</span> <span class="token operator">*</span> pf<span class="token punctuation">,</span> <span class="token operator">*</span> pg<span class="token punctuation">;</span> <span class="token operator">//</span> pf、pg都是指向<span class="token builtin">float</span>类型变量的指针<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li></ul></pre> <p>类型说明符<strong>表明了指针所指向对象的类型</strong>，星号（*）表明声明的变量是一个指针。</p> <pre data-index="5" class="set-code-show prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token builtin">int</span> <span class="token operator">*</span> pi<span class="token punctuation">;</span><span class="token operator">//</span>声明的意思是pi是一个指针，<span class="token operator">*</span>pi是<span class="token builtin">int</span>类型。<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li></ul></pre> <p>*和指针名之间的空格可有可无。通常，程序员在声明时使用空格，在解引用变量时省略空格。</p> <p>pc指向的值（*pc）是char类型。pc本身是什么类型？<strong>我们描述它的类型是“指向char类型的指针”</strong>。pc 的值是一个地址，在大部分系统内部，该地址由一个无符号整数表示。但是，不要把指针认为是整数类型。一些处理整数的操作不能用来处理指针，反之亦然。</p> <p>例如，可以把两个整数相乘，但是不能把两个指针相乘。所以，<strong>指针实际上是一个新类型，不是整数类型</strong>。因此，如前所述，ANSI C专门为指针提供了%p格式的转换说明。</p> <h3><a name="t4"></a><a id="_81"></a>使用指针在函数间通信</h3> <p>可以用指针实现数值交换的问题</p> <p>🐬首先大家看一下这样一个问题，实现x和y的数值交换，需要你写一个函数实现。对于刚刚接触C语言，还不了解指针的uu而言，你们可能跟我当时想的一样。看看下面的代码有问题不？</p> <pre data-index="6" class="set-code-hide prettyprint"><code class="prism language-c has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">interchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 声明函数 */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;<!-- --></span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Originally x = %d and y = %d.\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">interchange</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now x = %d and y = %d.\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">interchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token comment">/* 定义函数 */</span><span class="token punctuation">&#123;<!-- --></span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> u<span class="token punctuation">;</span>    u <span class="token operator">=</span> v<span class="token punctuation">;</span>    v <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><div class="hide-preCode-box"><span class="hide-preCode-bt" data-report-view="{&quot;spm&quot;:&quot;1001.2101.3001.7365&quot;}"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li></ul></pre> <p>(●ˇ∀ˇ●)嘿嘿~可以尝试运行一下。</p> <p>你会发现，进入这个函数之后，值未发生改变。</p> <p>输出如下：</p> <blockquote>  <p>Originally x = 5 and y = 10.<br> Now x = 5 and y = 10.</p> </blockquote> <p>🍎现在改进一下：</p> <pre data-index="7" class="set-code-hide prettyprint"><code class="prism language-c has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">interchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><p><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><br><span class="token punctuation">&#123;<!-- --></span><br>    <span class="token keyword">int</span> x <span class="token operator">&#x3D;</span> <span class="token number">5</span><span class="token punctuation">,</span> y <span class="token operator">&#x3D;</span> <span class="token number">10</span><span class="token punctuation">;</span><br>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">“Originally x &#x3D; %d and y &#x3D; %d.\n”</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token function">interchange</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">“Now x &#x3D; %d and y &#x3D; %d.\n”</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token punctuation">&#125;</span></p><p><span class="token keyword">void</span> <span class="token function">interchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><br><span class="token punctuation">&#123;<!-- --></span><br>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span><br>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">“Originally u &#x3D; %d and v &#x3D; %d.\n”</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><br>    temp <span class="token operator">&#x3D;</span> u<span class="token punctuation">;</span><br>    u <span class="token operator">&#x3D;</span> v<span class="token punctuation">;</span><br>    v <span class="token operator">&#x3D;</span> temp<span class="token punctuation">;</span><br>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">“Now u &#x3D; %d and v &#x3D; %d.\n”</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">&#125;</span></p><div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><div class="hide-preCode-box"><span class="hide-preCode-bt" data-report-view="{&quot;spm&quot;:&quot;1001.2101.3001.7365&quot;}"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li><li style="color: rgb(153, 153, 153);">20</li><li style="color: rgb(153, 153, 153);">21</li></ul></pre> <hr> <p>🍊输出如下</p> <blockquote>  <p>Originally x = 5 and y = 10.<br> Originally u = 5 and v = 10.<br> Now u = 10 and v = 5.<br> Now x = 5 and y = 10.</p> </blockquote> <p>interchange()没有问题，它交换了 u 和 v 的值。问题出在把结果传回 main()时。interchange()使用的变量并不是main()中的变量。因此，交换u和v的值对x和y的值没有影响！</p> <p><strong>函数形参和其他局部变量都属于函数私有，因此，声明在不同函数中的同名变量是完全不同的变量。</strong> 而且，函数无法直接访问其他函数中的变量。这种限制访问保护了数据的完整性。但是，当确实需要在函数中访问另一个函数的数据时，可以把指针作为函数的参数。</p> <p>🌈考虑到这样，我们采用指针解决！</p> <pre data-index="8" class="set-code-hide prettyprint"><code class="prism language-c has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><p><span class="token keyword">void</span> <span class="token function">interchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator"><em></span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator"></em></span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><br><span class="token punctuation">&#123;<!-- --></span><br>    <span class="token keyword">int</span> x <span class="token operator">&#x3D;</span> <span class="token number">5</span><span class="token punctuation">,</span> y <span class="token operator">&#x3D;</span> <span class="token number">10</span><span class="token punctuation">;</span><br>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">“Originally x &#x3D; %d and y &#x3D; %d.\n”</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token function">interchange</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">&#x2F;&#x2F; 把地址发送给函数</span><br>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">“Now x &#x3D; %d and y &#x3D; %d.\n”</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token punctuation">&#125;</span><br><span class="token keyword">void</span> <span class="token function">interchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator"><em></span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator"></em></span> v<span class="token punctuation">)</span><br><span class="token punctuation">&#123;<!-- --></span><br>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span><br>    temp <span class="token operator">&#x3D;</span> <span class="token operator"><em></span>u<span class="token punctuation">;</span>  <span class="token comment">&#x2F;&#x2F; temp获得 u 所指向对象的值</span><br>    <span class="token operator"></em></span>u <span class="token operator">&#x3D;</span> <span class="token operator"><em></span>v<span class="token punctuation">;</span><br>    <span class="token operator"></em></span>v <span class="token operator">&#x3D;</span> temp<span class="token punctuation">;</span><br><span class="token punctuation">&#125;</span></p><div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><div class="hide-preCode-box"><span class="hide-preCode-bt" data-report-view="{&quot;spm&quot;:&quot;1001.2101.3001.7365&quot;}"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li></ul></pre> <p>☘️运行一下，你会发现，很顺利。</p> <p>interchange(&amp;x, &amp;y);<strong>该函数传递的不是x和y的值，而是它们的地址</strong>。这意味着出现在interchange()原型和定义中的形式参数u和v将把地址作为它们的值。因此，应把它们声明为指针。由于x和y是整数，所以u和v是指向整数的指针，其声明如下：</p> <p>void interchange (int * u, int * v)</p> <p>接下来，在函数体中声明了一个交换值时必需的临时变量：<br> int temp;<br> 通过下面的语句<strong>把x的值储存在temp中</strong>：<br> temp = * u;</p> <p>记住，<strong>u的值是&amp;x，所以u指向x</strong>。 <strong>这意味着用 * u 即可表示x的值</strong>，这正是我们需要的。不要写成这样：<br> temp = u; /* 不要这样做 */<br> 因为这条语句赋给temp的是x的地址（<strong>u的值就是x的地址</strong>），而不是x的<br> 值。<strong>函数要交换的是x和y的值，而不是它们的地址。</strong><br> 与此类似，把y的值赋给x，要使用下面的语句：<br> *u = * v;<br> 这条语句相当于：<br> x = y;</p> <p>🌺下面我们总结一下该程序示例做了什么。</p> <p>我们需要一个函数交换x和y的值。把x和y的地址传递给函数，我们让interchange()访问这两个函数。使用指针和*运算符，该函数可以访问储存在这些位置的值并改变它们。</p> <p>可以省略ANSI C风格的函数原型中的形参名，如下所示：<br> void interchange(int *, int *);</p> <p>🌴一般而言，可以把变量相关的两类信息传递给函数。如果这种形式的函<br> 数调用，那么传递的是x的值：</p> <p>unction1(x);</p> <p>如果下面形式的函数调用，那么传递的是x的地址：</p> <p>function2(&amp;x);</p> <p>第1种形式要求函数定义中的形式参数必须是一个与x的类型相同的变<br> 量：</p> <p>int function1(int num)</p> <p>第2种形式要求函数定义中的形式参数必须是一个指向正确类型的指<br> 针：</p> <p>int function2(int * ptr)</p> <p><strong>如果要计算或处理值，那么使用第 1 种形式的函数调用</strong>；如果<strong>要在被调</strong><br> <strong>函数中改变主调函数的变量，则使用第2种形式的函数调用</strong>。</p> <p>我们用过的scanf()函数就是这样。当程序要把一个值读入变量时（如本例中的num），调用的是scanf(“%d”, &amp;num)。scanf()读取一个值，然后把该值储存到指定的地址上。</p> <p>对本例而言，<strong>指针让interchange()函数通过自己的局部变量改变main()中变量的值。</strong></p> <h3><a name="t5"></a><a id="_231"></a>总结</h3> <p><img src="https://img-blog.csdnimg.cn/direct/238ff785593e43b59d780763b816df2a.png#pic_center" alt="在这里插入图片描述" width="70%"><br> 这张图很好地反映了变量 地址 之间的关系。</p> <p>🌈在许多语言中，地址都归计算机管，对程序员隐藏。然而<strong>在 C 中，可</strong><br> <strong>以通过&amp;运算符访问地址，通过 * 运算符获得地址上的值</strong>。例如，&amp;barn表示变量barn的地址，使用函数名即可获得变量的数值。</p> <p>例如，printf(“%d\n”,barn)打印barn的值，<strong>使用 * 运算符即可获得储存在地址上的值。</strong> 如果pbarn=&amp;barn;，那么*pbarn表示的是储存在&amp;barn地址上的值。</p> <p>简而言之，普通变量把值作为基本量，把地址作为通过&amp;运算符获得的<br> 派生量，而指针变量把地址作为基本量，把值作为通过*运算符获得的派生<br> 量。</p> <p>使用&amp;、* 和指针可以操纵地址和地址上的内容。</p> <blockquote>  <p>🌞(●ˇ∀ˇ●)有帮助的话~ 点个赞叭 🙋</p> </blockquote>                </div><div data-report-view="{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;spm&quot;:&quot;1001.2101.3001.6548&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/qq_53131867/article/details/134842073&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}"><div></div></div>                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-f23dff6052.css" rel="stylesheet">                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-c216769e99.css" rel="stylesheet">        </div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hello word</title>
      <link href="/2024/05/04/hello-word/"/>
      <url>/2024/05/04/hello-word/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/05/04/xiaoxi/"/>
      <url>/2024/05/04/xiaoxi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>first try</p></blockquote><h1 id="测试文章"><a href="#测试文章" class="headerlink" title="测试文章"></a>测试文章</h1><p>123344</p><p>inject:<br>  head:<br>    inject:<br>  head:</p><p>  bottom:<br>       - <script src="https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"></script><br>       - <script src="https://cdn.jsdelivr.net/gh/xiabo2/CDN@latest/fishes.js"></script></p><p>  bottom:</p><pre><code>   - &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt;          - &lt;script src=&quot;https://cdn.jsdelivr.net/gh/xiabo2/CDN@latest/fishes.js&quot;&gt;&lt;/script&gt;</code></pre><h2 id="达到"><a href="#达到" class="headerlink" title="达到"></a>达到</h2><h3 id="DSA"><a href="#DSA" class="headerlink" title="DSA"></a>DSA</h3><p>根据C++ primer 做的笔记</p><h1 id="CH1-开始"><a href="#CH1-开始" class="headerlink" title="CH1 开始"></a>CH1 开始</h1><p>程序源文件命名约定 常见的为.cc .cxx .cpp .cp  .C</p><p>vscode 里面类似于打出main 就有的那个一整块的东西 snips</p><h2 id="标准输入输出对象"><a href="#标准输入输出对象" class="headerlink" title="标准输入输出对象"></a>标准输入输出对象</h2><p>标准库定义了4个IO对象。为了处理输入，我们使用一个名为cin（发音为see-in）的istream类型的对象。这个对象也被称为标准输入（standard input)。对于输出，我们使用一个名为 cout（发音为 see-out）的ostream类型的对象。此对象也被称为标准输出(standard output)。标准库还定义了其他两个ostream对象，名为<strong>cerr和 clog</strong>(（发音分别为see-err 和 see-log)。<strong>我们通常用cerr来输出警告和错误消息，因此它也被称为标准错误(standard error)。而clog用来输出程序运行时的一般性信息。</strong></p><p>字符串字面值常量（stringliteral)，是用一对双引号包围的字符序列。在双引号之间的文本被打印到标准输出。</p><p>第二个运算符打印<strong>endl</strong>，<strong>这是一个被称为操纵符</strong>(manipulator)的特殊值。写入endl的效果是结束当前行，<strong>并将与设备关联的缓冲区(buffer)</strong><br><strong>中的内容刷到设备中。缓冲刷新操作可以保证到目前为止程序所产生的所有输出都真正写入输出流中，而不是仅停留在内存中等待写入流。</strong></p><p>程序员常常在调试时添加打印语句。这类语句应该保证“一直”刷新流。否则,如果程序崩溃，输出可能还留在缓冲区中,从而导致关于程序崩溃位置的错误推断。</p><h3 id="使用标准库命名"><a href="#使用标准库命名" class="headerlink" title="使用标准库命名"></a>使用标准库命名</h3><p>通过命名空间使用标准库有一个副作用:当使用标准库中的一个名字时，必须显式说明我们想使用来自命名空间std中的名字。例如，需要写出std: :cout，通过使用作用域运算符(::)来指出我们想使用定义在命名空间std 中的名字cout。3.1节(第74页)将给出一个更简单的访问标准库中名字的方法。</p><p>作用域运算符::</p><h3 id="从流读取数据"><a href="#从流读取数据" class="headerlink" title="从流读取数据"></a>从流读取数据</h3><p>cin&gt;&gt; </p><p>输入运算符 &gt;&gt; </p><p>它读入输入数据。输入运算符(&gt;&gt;）与输出运算符类似，它接受一个istream作为其左侧运算对象，接受一个对象作为其右侧运算对象。它从给入给定对象中。与输出运算符类似，输入运算符返回其左侧运算对象作为其计算结果。因此，此表达式等价于</p><p>(std: :cin &gt;&gt;v1）&gt;&gt;v2;</p><h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">std: : cout &lt;&lt;<span class="string">&quot;The sum of &quot;</span> &lt;&lt; vl;</span><br><span class="line">&lt;&lt; <span class="string">&quot; and &quot;</span> &lt;&lt; v2;</span><br><span class="line">&lt;&lt;<span class="string">&quot; is &quot;</span> &lt;&lt; vl + v2&lt;&lt; std: :endl;</span><br><span class="line"><span class="comment">//如果程序是合法的，它输出什么?如果程序不合法，原因何在?应该如何修正?</span></span><br></pre></td></tr></table></figure><p>在C++中，流插入操作（<code>&lt;&lt;</code>）应该在每对 <code>&lt;&lt;</code> 之间有逗号（<code>,</code>）来分隔，而且整个表达式应该在单行中完成，否则可能会导致编译错误。</p><p>修改！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt;<span class="string">&quot;The sum of &quot;</span> &lt;&lt; x1&lt;&lt;</span><br><span class="line">         <span class="string">&quot; and &quot;</span> &lt;&lt; x2&lt;&lt;</span><br><span class="line">         <span class="string">&quot; is &quot;</span> &lt;&lt;x1+x2 &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>ctr+Z 只有单独的一行才能使用</p><p>cout和cin转换为bool，就是输入流的状态，若有内容则为true，否则false。可以试着运行这个代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> s[<span class="number">20</span>];</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;plese enter:\n&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;s)</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;进入循环了\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>std: :cout &lt;&lt; “&#x2F;<em>“;std: :cout&lt;&lt;”</em>&#x2F;“;<br>std::cout &lt;&lt;&#x2F;<em>“</em>&#x2F;“<em>&#x2F;;<br>std: :cout &lt;&#x2F; <em>“</em>&#x2F;“&#x2F;</em>“&#x2F;<em>“</em>&#x2F;;</p><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><p>关于读取数量不定的输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>, value = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//读取数据直到遇到文件尾，计算所有读入的值的和</span></span><br><span class="line">    <span class="keyword">while</span> (std: :cin &gt;&gt; value)</span><br><span class="line">    sum += value; <span class="comment">//等价于sum = sum + value</span></span><br><span class="line">    std: : cout &lt;&lt; <span class="string">&quot;sum is: &quot;</span> &lt;&lt; sum&lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编译器常见的错误"><a href="#编译器常见的错误" class="headerlink" title="编译器常见的错误"></a>编译器常见的错误</h3><p>语法错误(syntax error):程序员犯了C++语言文本上的错误。</p><p>类型错误(type error）:C++中每个数据项都有其类型。例如，10的类型是int(或者更通俗地说，“10是一个 int型数据”)。单词”hello”,包括两侧的双引号标记,则是一个字符串字面值常量。一个类型错误的例子是,向一个期望参数为 int的函数传递了一个字符串字面值常量。</p><p>声明错误（declaration error）: C++程序中的每个名字都要先声明后使用。名字声明失败通常会导致一条错误信息。两种常见的声明错误是:对来自标准库的名字忘记使用std::、标识符名字拼写错误</p><h2 id="关于类"><a href="#关于类" class="headerlink" title="关于类"></a>关于类</h2><p>每个类都定义了一个新的类型  类型名就是类名</p><p>比如我们定义的Sales_item就定义了一个名为Sales_item的类型，与内置类型一样，可以定义类的类型的变量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sales_item item;</span><br></pre></td></tr></table></figure><p>是想表达 item是一个sales_item类型的对象。我们通常将“一个sales_item类型的对象”简单说成“一个Sales_item对象”，或更简单的“一个Sales_ item”。</p><h2 id="CH2-变量和基本类型"><a href="#CH2-变量和基本类型" class="headerlink" title="CH2 变量和基本类型"></a>CH2 变量和基本类型</h2><h3 id="关于无符号数"><a href="#关于无符号数" class="headerlink" title="关于无符号数"></a>关于无符号数</h3><p>无符号数不会是负的</p><img src="D:\typora\pic\image-20240504183118013.png" alt="image-20240504183118013" style="zoom:67%;" /><p>如果表达式里既有带符号类型又有无符号类型,当带符号类型取值为负时会出现异常结果，这是因为带符号数会自动地转换成无符号数。例如,在一个形如a*b的式子中,如果a &#x3D;-1, b&#x3D;-1，而且a和b都是int,则表达式的值显然为-1。然而,如果a是int，而b是unsigned,则结果须视在当前机器上int所占位数而定。在我们的环境里，结果是4294967295。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/04/hello-world/"/>
      <url>/2024/05/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
